name: build-silverblue-base

on:
  schedule:
    - cron: '0 0 * * 0'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'

env:
  IMAGE_NAME: silverblue-base
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  push:
    name: Build and push image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        major_version: [37, 38]
        include:
          - major_version: 37
            is_latest: true
            is_stable: true
          - major_version: 38
            is_latest: true
            is_stable: false
    steps:
      - name: Checkout silverblue-base
        uses: actions/checkout@v3

      - name: Generate image tags
        id: generate-tags
        shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          alias_tags=()
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            alias_tags+=("pr-${{ github.event.number }}")
          else
            echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
            alias_tags+=("${{ matrix.major_version }}")
            if [[ "${{ matrix.is_latest }}" == "true" ]]; then
              alias_tags+=("latest")
            fi
            if [[ "${{ matrix.is_stable }}" == "true" ]]; then
              alias_tags+=("stable")
            fi
          fi
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Build image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
            ${{ steps.generate-tags.outputs.date }}
            ${{ steps.generate-tags.outputs.sha_short }}
          build-args: |
            FEDORA_MAJOR_VERSION=${{ matrix.major_version }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      - name: Generate image registry
        if: github.event_name != 'pull_request'
        uses: ASzc/change-string-case-action@v5
        id: image-registry
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Push image to registry
        if: github.event_name != 'pull_request'
        uses: redhat-actions/push-to-registry@v2
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.image-registry.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      - name: Generate signing key
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ env.COSIGN_PRIVATE_KEY }}" > cosign.key
          wc -c cosign.key
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: sigstore/cosign-installer@v3.0.1
        if: github.event_name != 'pull_request'

      - name: Sign image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign --key cosign.key -y ${{ steps.image-registry.outputs.lowercase }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false

      - name: Echo outputs
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
